version: '3.8'

services:
  backend:
    container_name: erp_stag_backend
    build:
      context: ./backend
      dockerfile: ../.docker/backend/Dockerfile
    ports:
      - "8881:8080"
    depends_on:
      - mysql
    env_file:
      - .env
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_DATABASE}?useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD}
      SPRING_PROFILES_ACTIVE: ${ENV}
    volumes:
      - ./backend/src:/app/src  # Mount only the source directory
    networks:
      - erp_stag_network

  frontend:
    container_name: erp_stag_frontend
    build:
      context: ./frontend
      dockerfile: ../.docker/frontend/Dockerfile
    ports:
      - "8889:4200"
    command: npm start
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - ./.env:/app/.env
      - erp_stag_node_modules:/app/node_modules
    networks:
      - erp_stag_network

  mysql:
    container_name: erp_stag_mysql
    build:
      context: .
      dockerfile: ./.docker/mysql/Dockerfile
  #  restart: always
    ports:
      - "3307:3306"
    hostname: mysql
    env_file:
      - .env
    volumes:
      - erp_stag_db_data:/var/lib/mysql
      - ./.docker/mysql/conf/my.cnf:/etc/mysql/conf.d/my.cnf
      - ./.docker/mysql/dump:/docker-entrypoint-initdb.d
    networks:
      - erp_stag_network

  phpmyadmin:
    container_name: erp_stag_phpmyadmin
    build:
      context: .
      dockerfile: ./.docker/phpmyadmin/Dockerfile
    depends_on:
      - mysql
    ports:
      - "8082:80"
    env_file:
      - .env
    environment:
      PMA_HOST: mysql
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    networks:
      - erp_stag_network

  mailhog:
    image: mailhog/mailhog
    container_name: erp_stag_mailhog
    ports:
      - "8026:8025"  # Web interface
      - "1026:1025"  # SMTP port
    networks:
      - erp_stag_network

#  nginx:
#    container_name: erp_stag_nginx
#    build:
#      context: .
#      dockerfile: ./.docker/nginx/Dockerfile
#    volumes:
#      - ./.docker/nginx/conf.d:/etc/nginx/conf.d
#      - ./.docker/certbot/conf:/etc/letsencrypt
#      - ./.docker/certbot/www:/var/www/certbot
#    ports:
#      - "80:80"
#      - "443:443"
#    depends_on:
#      - backend
#      - frontend
#    networks:
#      - erp_stag_network

#  certbot:
#    container_name: erp_stag_certbot
#    build:
#      context: .
#      dockerfile: ./.docker/certbot/Dockerfile
#    volumes:
#      - ./.docker/certbot/conf:/etc/letsencrypt
#      - ./.docker/certbot/www:/var/www/certbot
#    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
#    depends_on:
#      - nginx
#    networks:
#      - erp_stag_network

networks:
  erp_stag_network:

volumes:
  erp_stag_node_modules:
  erp_stag_db_data:
    name: erp_stag_db_data
